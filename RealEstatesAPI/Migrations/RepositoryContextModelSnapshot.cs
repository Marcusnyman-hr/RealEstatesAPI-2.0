// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace RealEstatesAPI.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RealEstateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RealEstateId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f799e33e-651e-431b-adbc-f7d2f5dc60a8"),
                            Content = "This is a comment for small house",
                            CreatedOn = new DateTime(2021, 5, 30, 16, 33, 8, 686, DateTimeKind.Local).AddTicks(9257),
                            RealEstateId = new Guid("f30f7fd5-afe5-40f8-9294-7dea56fd106c"),
                            UserId = new Guid("fe987917-89e7-49ca-b92d-6c49efc26dfb"),
                            UserName = "Classe"
                        });
                });

            modelBuilder.Entity("Entities.Models.RealEstate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanBeRented")
                        .HasColumnType("bit");

                    b.Property<bool>("CanBeSold")
                        .HasColumnType("bit");

                    b.Property<int>("ConstructionYear")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("RealEstateTypeId")
                        .HasColumnType("int");

                    b.Property<int>("RentingPrice")
                        .HasColumnType("int");

                    b.Property<int>("SellingPrice")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RealEstateTypeId");

                    b.ToTable("RealEstates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f97a72cb-5c1b-419a-a1c1-14d318ea22b7"),
                            Address = "Mladost 1A, Telerik Academy building",
                            CanBeRented = true,
                            CanBeSold = true,
                            ConstructionYear = 2005,
                            Contact = "0888-888-888",
                            CreatedOn = new DateTime(2021, 5, 26, 16, 33, 8, 676, DateTimeKind.Local).AddTicks(2945),
                            Description = "You will love it. The view is great!",
                            RealEstateTypeId = 1,
                            RentingPrice = 500,
                            SellingPrice = 120000,
                            Title = "Nice Apartment",
                            UserId = new Guid("dcb8af96-64a9-4a24-b1a5-86f43acde49c")
                        },
                        new
                        {
                            Id = new Guid("edc04431-20d9-42d5-9c05-edae58138bba"),
                            Address = "Mladost 2A, Telerik Academy building",
                            CanBeRented = true,
                            CanBeSold = true,
                            ConstructionYear = 2005,
                            Contact = "0888-888-888",
                            CreatedOn = new DateTime(2021, 5, 26, 16, 33, 8, 685, DateTimeKind.Local).AddTicks(1741),
                            Description = "You will love it. The view is great!",
                            RealEstateTypeId = 1,
                            RentingPrice = 500,
                            SellingPrice = 120000,
                            Title = "Ugly Apartment",
                            UserId = new Guid("dcb8af96-64a9-4a24-b1a5-86f43acde49c")
                        },
                        new
                        {
                            Id = new Guid("d604180f-37d8-4cc5-bfbd-45c904500023"),
                            Address = "Mladost 3A, Telerik Academy building",
                            CanBeRented = true,
                            CanBeSold = true,
                            ConstructionYear = 1990,
                            Contact = "0888-888-888",
                            CreatedOn = new DateTime(2021, 5, 26, 16, 33, 8, 685, DateTimeKind.Local).AddTicks(1927),
                            Description = "This apartment is not nice, but cheap",
                            RealEstateTypeId = 1,
                            RentingPrice = 300,
                            SellingPrice = 20000,
                            Title = "Very old Apartment",
                            UserId = new Guid("dcb8af96-64a9-4a24-b1a5-86f43acde49c")
                        },
                        new
                        {
                            Id = new Guid("b0e501a1-bfa8-4fcf-ad7e-5daf590797fe"),
                            Address = "Mladost 23A, Telerik PREMIUM building",
                            CanBeRented = true,
                            CanBeSold = true,
                            ConstructionYear = 2019,
                            Contact = "0888-888-888",
                            CreatedOn = new DateTime(2021, 5, 26, 16, 33, 8, 685, DateTimeKind.Local).AddTicks(1961),
                            Description = "This is premium living!",
                            RealEstateTypeId = 1,
                            RentingPrice = 2000,
                            SellingPrice = 450000,
                            Title = "EXPENSIVE Apartment",
                            UserId = new Guid("dcb8af96-64a9-4a24-b1a5-86f43acde49c")
                        },
                        new
                        {
                            Id = new Guid("f30f7fd5-afe5-40f8-9294-7dea56fd106c"),
                            Address = "HouseStreet 23",
                            CanBeRented = false,
                            CanBeSold = true,
                            ConstructionYear = 2019,
                            Contact = "0888-888-888",
                            CreatedOn = new DateTime(2021, 5, 26, 16, 33, 8, 685, DateTimeKind.Local).AddTicks(1989),
                            Description = "Perfect house for small family",
                            RealEstateTypeId = 2,
                            RentingPrice = 0,
                            SellingPrice = 350000,
                            Title = "Small house",
                            UserId = new Guid("dcb8af96-64a9-4a24-b1a5-86f43acde49c")
                        },
                        new
                        {
                            Id = new Guid("c1c32290-5f67-4a19-aa3d-a44fc958b35b"),
                            Address = "HouseStreet 24",
                            CanBeRented = false,
                            CanBeSold = true,
                            ConstructionYear = 2016,
                            Contact = "0888-888-888",
                            CreatedOn = new DateTime(2021, 5, 26, 16, 33, 8, 685, DateTimeKind.Local).AddTicks(2188),
                            Description = "Perfect house for a medium sized family",
                            RealEstateTypeId = 2,
                            RentingPrice = 0,
                            SellingPrice = 450000,
                            Title = "Medium house",
                            UserId = new Guid("dcb8af96-64a9-4a24-b1a5-86f43acde49c")
                        },
                        new
                        {
                            Id = new Guid("f97003cf-751a-401a-b37e-452e966ffc33"),
                            Address = "HouseStreet 27",
                            CanBeRented = false,
                            CanBeSold = true,
                            ConstructionYear = 2014,
                            Contact = "0888-888-888",
                            CreatedOn = new DateTime(2021, 5, 26, 16, 33, 8, 685, DateTimeKind.Local).AddTicks(2215),
                            Description = "Perfect house for a big family!",
                            RealEstateTypeId = 2,
                            RentingPrice = 0,
                            SellingPrice = 850000,
                            Title = "GIGANTIC house",
                            UserId = new Guid("dcb8af96-64a9-4a24-b1a5-86f43acde49c")
                        },
                        new
                        {
                            Id = new Guid("51b4e09d-69da-4130-af68-c319ae70ca52"),
                            Address = "HouseStreet 27",
                            CanBeRented = false,
                            CanBeSold = true,
                            ConstructionYear = 2014,
                            Contact = "0888-888-888",
                            CreatedOn = new DateTime(2021, 5, 26, 16, 33, 8, 685, DateTimeKind.Local).AddTicks(2237),
                            Description = "Perfect house for a big family!",
                            RealEstateTypeId = 2,
                            RentingPrice = 0,
                            SellingPrice = 850000,
                            Title = "GIGANTIC house",
                            UserId = new Guid("dcb8af96-64a9-4a24-b1a5-86f43acde49c")
                        },
                        new
                        {
                            Id = new Guid("16b1323c-590b-478b-9e20-b02c06817ada"),
                            Address = "Officestreet 33",
                            CanBeRented = false,
                            CanBeSold = true,
                            ConstructionYear = 2010,
                            Contact = "0888-888-888",
                            CreatedOn = new DateTime(2021, 5, 26, 16, 33, 8, 685, DateTimeKind.Local).AddTicks(2257),
                            Description = "The perfect office for a medium sized company",
                            RealEstateTypeId = 3,
                            RentingPrice = 0,
                            SellingPrice = 1850000,
                            Title = "Modern Office",
                            UserId = new Guid("dcb8af96-64a9-4a24-b1a5-86f43acde49c")
                        },
                        new
                        {
                            Id = new Guid("ccf6bebe-692c-49ca-85e0-531223869fb9"),
                            Address = "Officestreet 553",
                            CanBeRented = false,
                            CanBeSold = true,
                            ConstructionYear = 2010,
                            Contact = "0888-888-888",
                            CreatedOn = new DateTime(2021, 5, 26, 16, 33, 8, 685, DateTimeKind.Local).AddTicks(2276),
                            Description = "The perfect office for a minicompany",
                            RealEstateTypeId = 3,
                            RentingPrice = 0,
                            SellingPrice = 50000,
                            Title = "Mini Office",
                            UserId = new Guid("dcb8af96-64a9-4a24-b1a5-86f43acde49c")
                        },
                        new
                        {
                            Id = new Guid("493294d0-ed52-48e8-b517-4a3fc0ab4810"),
                            Address = "Warehousestreet 1",
                            CanBeRented = false,
                            CanBeSold = true,
                            ConstructionYear = 2000,
                            Contact = "0888-888-888",
                            CreatedOn = new DateTime(2021, 5, 26, 16, 33, 8, 685, DateTimeKind.Local).AddTicks(2300),
                            Description = "Gigantic warehouse that was formerly used by Amazon! Can fit 4.000.000 cars inside.",
                            RealEstateTypeId = 4,
                            RentingPrice = 0,
                            SellingPrice = 199240000,
                            Title = "HUGE Warehouse",
                            UserId = new Guid("dcb8af96-64a9-4a24-b1a5-86f43acde49c")
                        });
                });

            modelBuilder.Entity("Entities.Models.RealEstateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RealEstateTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Apartment"
                        },
                        new
                        {
                            Id = 2,
                            Name = "House"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Office"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Warehouse"
                        });
                });

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.HasOne("Entities.Models.RealEstate", "RealEstate")
                        .WithMany("Comments")
                        .HasForeignKey("RealEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RealEstate");
                });

            modelBuilder.Entity("Entities.Models.RealEstate", b =>
                {
                    b.HasOne("Entities.Models.RealEstateType", "PropertyType")
                        .WithMany()
                        .HasForeignKey("RealEstateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("Entities.Models.RealEstate", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
